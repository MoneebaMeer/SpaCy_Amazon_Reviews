# -*- coding: utf-8 -*-
"""sentiment_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WRDg-z6ApGu5yR0aJcJbRlXGNQ1h0w3H
"""

from google.colab import drive
drive.mount('/content/drive')

# Install spacytextblob
!pip install spacytextblob
# Download additional data for TextBlob
!python-m textblob.download_corpora

# Import libraries
import pandas as pd
import spacy
from spacytextblob.spacytextblob import SpacyTextBlob

# Load language model
nlp = spacy.load('en_core_web_sm')

# Add extension
nlp.add_pipe('spacytextblob')

dataframe = pd.read_csv('/content/drive/MyDrive/amazon_product_reviews.csv')
dataframe.head()

# Selecting 'reviews.text' column from dataset and retrieving its data
reviews_data = dataframe['reviews.text']
reviews_data.head()

# Dropping missing values
clean_data = dataframe.dropna(subset=['reviews.text'])
clean_data.head()

sample = "Hello how are you this fine morning?"

# Convert text to string, lowercase and remove trailing white spaces
def clean_text(text):
  text = str(text).lower().strip()

# Process the text with spaCy
  doc = nlp(text)

  cleaned_tokens = [token.text for token in doc if not token.is_stop and token.is_alpha]
  cleaned_text = ' '.join(cleaned_tokens)

  return cleaned_text

converted_sample = clean_text(sample)
converted_sample

dataframe['Cleaned_Reviews'] = dataframe['reviews.text'].apply(clean_text)
dataframe.head()

example = dataframe['Cleaned_Reviews'][9]
example

doc = nlp(example)
polarity = doc._.blob.polarity
polarity

def analyse_sentiment(text):
  doc = nlp(text)

  polarity = doc._.blob.polarity

  if polarity > 0:
    sentiment = 'Positive'
  elif polarity < 0:
    sentiment = 'Negative'
  else:
    sentiment = 'Neutral'

  return sentiment

review1 = dataframe['Cleaned_Reviews'][17]
review2 = dataframe['Cleaned_Reviews'][35]
review3 = dataframe['Cleaned_Reviews'][3]
review4 = dataframe['Cleaned_Reviews'][0]

review1, review2, review3, review4

analyse_sentiment(review1)

analyse_sentiment(review2)

analyse_sentiment(review3)

analyse_sentiment(review4)

# Comparing similarity
def compare_similarity(review1, review2):
  doc1 = nlp(review1)
  doc2 = nlp(review2)
  similarity = doc1.similarity(doc2)

  return similarity

compare_similarity(review1, review2)